# This workflow will build and push a new backend container image to Amazon ECR and run the container in EC2,
# when there is a push to the "main" branch.
#

name: Deploy to Amazon ECR and EC2

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: ecr-vacationer-backend
  IMAGE_TAG: latest

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: development
      url: http://vacationer-sandbox.cem.ninja/calendar

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |        
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Public IP of Github Actions
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Add Github Actions IP to Security group
      run: |
        aws ec2 authorize-security-group-ingress --group-id sg-0b06465276d656a09 --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: SSH to EC2 and replace the docker containers
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        IMAGE: backend
        EC2_IP: http://34.240.254.109:3001
        DOCDB_URI: ${{ secrets.DOCDB_URI }}
        SLACK_URI: ${{ secrets.SLACK_URI }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ubuntu@34.240.254.109 "bash -s -- $IMAGE $EC2_IP $DOCDB_URI $SLACK_URI" < docker_restart.sh

    - name: Remove Github Actions IP from Security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id sg-0b06465276d656a09 --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      if: always()